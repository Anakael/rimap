// Core ABNF [rfc5234]
SP = _{ " " }
CR = _{ "\x0D" }
LF = _{ "\x0A" }
CRLF = _{ CR ~ LF }
CHAR = { '\x01'..'\x7F' }
CTL = _{ '\x00'..'\x1f' | "\x7F" }
DQUOTE = _{ "\x22" }
DIGIT = _{ '0'..'9' }
// Imap grammar [rfc3501]

main = _{ continue_req }

continue_req = { "+" ~ SP ~ (resp_text | base64) ~ CRLF }

response_tagged = { tag ~ SP ~ resp_cond_state ~ CRLF }

tag = { (!"+" ~ ASTRING_CHAR)+ }
resp_cond_state = { ("OK" | "NO" | "BAD") ~ SP ~ resp_text }

resp_text = { ("[" ~ resp_text_code ~ "]" ~ SP)? ~ text }
resp_text_code = { "ALERT" | "BADCHARSET" ~ (SP ~ "(" ~ astring ~ (SP ~ astring)* ~ ")")? | capability_data | "PARSE" | "PERMANENTFLAGS" ~ SP ~ "(" ~ (flag_perm ~ (SP ~ flag_perm)*)? ~ ")" | "READ-ONLY" | "READ-WRITE" | "TRYCREATE" | "UIDNEXT" ~ SP ~ nz_number | "UIDVALIDITY" ~ SP ~ nz_number | "UNSEEN" ~ SP ~ nz_number | atom ~ (SP ~ (!"]" ~ TEXT_CHAR)+)? }

capability_data = { "CAPABILITY" ~ (SP ~ capability)* ~ SP ~ "IMAP4rev1" ~ (SP ~ capability)* }
capability = { ("AUTH=" ~ auth_type) | atom }
auth_type = { atom }

flag_perm = { flag | "\\*" }
flag = { "\\Answered" | "\\Flagged" | "\\Deleted" | "\\Seen" | "\\Draft" | flag_keyword | flag_extension }
flag_extension = { "\\" ~ atom }
flag_keyword = { atom }

// Strings

atom = { ATOM_CHAR+ }
astring = { ASTRING_CHAR+ | string }
ASTRING_CHAR = _{ ATOM_CHAR | resp_specials }
ATOM_CHAR = _{ !atom_specials ~ CHAR }
atom_specials = { "(" | ")" | "{" | SP | CTL | list_wildcards | quoted_specials | resp_specials }
list_wildcards = { "%" | "*" }

string = { quoted | literal }
quoted = { DQUOTE ~ QUOTED_CHAR* ~ DQUOTE }
QUOTED_CHAR = { !quoted_specials ~ TEXT_CHAR }
quoted_specials = { DQUOTE | "\\" }
resp_specials = { "]" }
text = { TEXT_CHAR+ }
TEXT_CHAR = { (!(CR | LF) ~ CHAR)+ }

literal = { "{" ~ number ~ "}" ~ CRLF ~ CHAR8* }
CHAR8 = { '\x01'..'\xff' }
//

nz_number = { digit_nz ~ DIGIT* }
digit_nz = { '1'..'9' }
number = { DIGIT+ }

//
base64 = { (base64_char){4}* ~ (base64_terminal)? }
ALPHA = _{ 'a'..'z' | 'A'..'Z' }
base64_char = { ALPHA | DIGIT | "+" | "/" }
base64_terminal = { ((base64_char){2} ~ "==") | ((base64_char){3} ~ "=") }
